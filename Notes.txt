gene prop 00: 625 digits
    - 10x random seed
    - 240x colour
        - 80x body
        - 80x legs
        - 80x head
    - 110x mods
        - 10x nose_size (+/-)
        - 10x horn_size (+/-)
        - 20x ear
            - 10x length (+/-)
            - 10x curl (left, right)
        - 30x snout
            - 10x rotation (+/-)
            - 10x length (+/-)
            - 10x size (+/-)
        - 10x head_size (+/-)
        - 10x wing_size (+/-)
        - 20x stance_width (front/back, +/-)
    - 265x pattern
        - 85x colour
        - 5x pattern_num
        - 50x flip (x,y)
        - 125x variation

colour set for body/legs/head:
    - 10x metal (+/-)
    - 10x gloss (+/-)
    - 30x base (rgb, +/-)
    - 30x emission (rgb, +/-)

colour set for pattern:
    - 30x base (rgb, +/-)
    - 30x emission (rgb, +/-)
    - 5x alpha
    - 10x metal (+/-)
    - 10x gloss (+/-)

    1 10-bit line
    87 5-bit lines
    2 25-bit lines
    1 125-bit line




IMPORT
                :maF:::9:cdFc3c^cDcF:c0EF^:cE^E1c0c^Def^tFt^cAFFtFE:tBcuBclEFtF3FF0Fttttttttttttttt:t::tt:c:c:ctc:c:c:^Fc:c:1F^t^tm:C^c::2:0A:c0:0E1F1F1A1UtTa0tc0ctctFLct^:::F
-> Unwind (Unscramble)
                ^^^2^a91000ttttttttttttttttttttttttttttttd:c:c:c:c:c:c:c:c:c:c:c:c:c:c:c:c:c:c:c:c:c:c:c:c:c:c:m:m^FFAFACFFFFFEBEFFFBEEEF3FFFFEFF3F^ADULT^0^0^0^1111100^Default
-> Split (Use regex)
    prop_00:    a91000ttttttttttttttttttttttttttttttd
    prop_01:    :c:c:c:c:c:c:c:c:c:c:c:c:c:c:c:c:c:c:c:c:c:c:c:c:c:c:m:m
    dom_rec:    FFAFACFFFFFEBEFFFBEEEF3FFFFEFF3F
    etc...    

-> Unspool (Decode: a-z -> leading 0s, 0-F -> hex binary, symbols -> seperators)
    prop
    prop_01:    |00000|00000|00000|00000|00000|00000|00000|00000|00000|00000|00000|00000|00000|00000|00000|00000|00000|00000|00000|00000|00000|00000|00000|00000|00000|00000|000000000000000|000000000000000
    dom_rec:    11111111101011111010110011111111111111111111111010111110111111111111101111101110111011110011111111111111111111101111111100111111

-> Load gene template from schema

-> Load values into genes from unspooled code
    prop_00/dom_rec:    Split according to gene's bits. Bit == None: take all remaining bits (e.g. patterninfo)
    prop_01:    Split according to delimiter. Bit == None (Default): take all bits in delimiter.

-> Create dog from genes

EXPORT
-> Join genes into binary
    prop
    prop_01:    |00000|00000|00000|00000|00000|00000|00000|00000|00000|00000|00000|00000|00000|00000|00000|00000|00000|00000|00000|00000|00000|00000|00000|00000|00000|00000|000000000000000|000000000000000
    dom_rec:    11111111101011111010110011111111111111111111111010111110111111111111101111101110111011110011111111111111111111101111111100111111

-> Spool binary
    prop_00:    a91000ttttttttttttttttttttttttttttttd
    prop_01:    :c:c:c:c:c:c:c:c:c:c:c:c:c:c:c:c:c:c:c:c:c:c:c:c:c:c:m:m
    dom_rec:    FFAFACFFFFFEBEFFFBEEEF3FFFFEFF3F

-> Join with version header & misc unencoded data (e.g. name, age)
                ^^^2^a91000ttttttttttttttttttttttttttttttd:c:c:c:c:c:c:c:c:c:c:c:c:c:c:c:c:c:c:c:c:c:c:c:c:c:c:m:m^FFAFACFFFFFEBEFFFBEEEF3FFFFEFF3F^ADULT^0^0^0^1111100^Default

-> Spool (Scramble)
                :maF:::9:cdFc3c^cDcF:c0EF^:cE^E1c0c^Def^tFt^cAFFtFE:tBcuBclEFtF3FF0Fttttttttttttttt:t::tt:c:c:ctc:c:c:^Fc:c:1F^t^tm:C^c::2:0A:c0:0E1F1F1A1UtTa0tc0ctctFLct^:::F

ageless - eats food in one bite, no flora. hunger cannot be increased. can immediately pupate.
pupates into puppy, can eat and gain flora normally. number of minutes only goes up after pupating

test codes:

(shortest known code, "ageless" + no name or version)
^tEbON^t^N^j0 

(weird code)
7b2E11CFBA=FFCC6107EcD8b^DFE0=19A509c=0FC0813C8<EB^193t2=:2d67 Bu920A88F1E1A60a4DA9=59109400iAC0A7D<:01021C073===bC52;^b1::D<2c6;EeF580<CDF96A75928D5aC;7;<0a;50D93b^cFTA:DC0L332C4BcBC98.B03eF^bCb08FaFA2F^81F22U=7.D1C777=D4=9^710015F3s0.6MsBii2DEB1:939C33Aa3Bba2ca9DC586i51Ee=B480483F0^A0^cbF8A45F^6Fc001A^1a8F6639'

(default)
::::Adcc:cEcFcF:c0EFT:cE^E2c0c39^0^t011ttFt^tEtFtF0BcBcFF:0FR0ntytmamt:t9tctFt3t^:ttLc^c^c3c:a7ct:^c1c^10^t:FFAAU:d::0c::2F2E:^t3tF:F:tct:t:t:ttc0c:c:FFD:Fct.t:ctCF

(gunker)
2EadA63f<0a0cLA<EFd2937125:8FF0850.b4CU6A2B3^1D327CE^a1C332=80n58FE37E6a9FBBFA91E59^872FAE67F<B0EcaC5BaFBu4B3369<75::7C:bba^F1:54F15=:a389:38:;;a6F=:74169b=B2FFB5;C;bFDa:2d40cCFC9FF81aE28.1581B7Fc9F7E7FE^FCF03DF0A^kFTaAC;4C^7151E50:a2B7:5C4c119G71ae1^06B11A:CaE0aa23r1AE9a=67F5AFFE8A5A1F^^F60AFa^cF43011319DC8B28<DA62

(gumber)
a;997F3AF9273:05F:FA9Fdb^03.A3^4U3D^1CF.2a9u08DF=1A;bB6B=1T6BD9a:E4b8D235DA8480^199;b1=:0B3B2E0er135:DA677;F689GF821<C0A1a3<47B31^b:453714FCgFE34a7:3caC3a=EdF;cA5:BBF:F:DE1:DCCLF6F51C4CC0bc40=FC668CC;6B3FF13:^F04103b638921b5Fc8c8^217=^0B10=7me5Cb6Ff8caBCA^58c6E1aB0C7A25F9F8DD01a86C2CF6^CAB^8<2C20F1Fa22E12a5B270

(noodle)
8F330<3N=Ba0^a5F8EfE0062b=3307608m070F12278oa14300C01^0<=51E0F0^0Cc80E2^0bF73A^4F04F8BF5F86Ca7=801<b4a1B=N4:a5F56730CE3cc0:a:=C=93;a3:^F=g02E3B6C3a2a82:C7D99b:c1FE2F08FF0E71NcF0FcB23AF2370FCAF033^3:b06FFT^9EA203BC3C9097:4C05:D3^a.1.3f=;5F0^2ed88l7200C8F100oF9082A4ca5C860<0b4l0:C5CF00I8F18aFDAF3=F3b0fc^E:c0038:F

(Too many legs)
93F0E4F08eL24b8b5<E8FBB6C93Ec3E10054e1D38937nbC03oA66239B0FF3F3aEaFaDE:0A9c3F01EFDCBEDFF67FDF2=0FE:o^<a1016aaa6FF4D<184aC:20Cc:;<<:613a:^A2a4a2^3<14<CaE94:3Ec^bDFbFa1aD4;C001:^2E29F3F53FF3;FF5FFf.3FbF32B^=37Ub;FT6431FF7 C1DT6.4;e^84c01BE;0^27 1008;58^2283aDFMg7CyCD=3e6s:DA48C82BF861780^E0F106A01b80F4000813dE;800Df<d9FLb^

(beta dog head)
^F:^86C93cF^Fc720F0BE-1502825e80DC:01:ccFFBj4:CFeF8LAaF1F0F7Fpbi:c2Fe9cba11C2tC3C7F:1n=:0nce:rF:F81F:3=::2CF:0tAB1:;;cac:0bF1t:tcF8111^183:F7.m^:F12^00c2F2B1F^0uFeFEFABcecFFAa6m^cUc3^F000^;:F026A:ec38F3C6FCrFE10F7b:BoCcj888^8C801FF045F0205C71F000c0T8Fe53F:0FC:jE7ccc

(rat)
FA1D092EcF163A8C81Cb6:;AgDDcD:499c399C8aE79344C827Y0BA19PD04446<1E8FCf07b06B040h08Fa0C414;5<8f118B4eFbF2bd1ElB8C11B1BbC9411041b90;:8F098BF4084018FA0b00C86aaC7a1FF84904:39aEA4AjD44Ct:9j94D50AaC2F104<g7408623DA01;48DF19F74490c9FE:B94b1BFC9460a44D85BCB2:=613FFB42EF51B87a8080<21AFA0D90a7::F72B000130Ct0CEb64F87ad37=^2C5^;c;A78d2147C^21<BB=B17;3C34a:8FB3A92700UP47^BFc9PC0R8DbDT5cE0140:F3B5a11t7t:E10D0308636aE40249F:B1EF71C1A

(sponge)
DF1;ab534a96E972:A4FFFF0YG68hC0CDABUc8Fc811332.8oT05BEc3584Eb0Aa2E88bEA6=cE420D83aC16=427CF68:1E4Ae<C2BA;=23C;7C6=::54198E==0=8a0=FcBF859<<BCUALcA8:E03<646c9S<beg:C^EF8D_DFFFF4ON0a68a^224905F0c7^993:65p4^250DnB41a83Aa1D30:84EB0Db9C0D9C151=C78587Aa5aC1F02E;F98F